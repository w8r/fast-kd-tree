{"version":3,"file":"phtree.umd.js","sources":["../node_modules/morton/lib/morton.js","../src/hilbert.js","../src/sort.js","../src/sfc-tree.js","../src/phtree.js"],"sourcesContent":["// Morton lookup tables.\n// Based on http://graphics.stanford.edu/~seander/bithacks.html#InterleaveTableLookup\nvar X = [ 0, 1 ], Y = [ 0, 2 ];\nfor (var i = 4; i < 0xFFFF; i <<= 2) {\n    for (var j = 0, l = X.length; j < l; j++) {\n        X.push((X[j] | i));\n        Y.push((X[j] | i) << 1);\n    }\n}\n\n// Only works for 24 bit input numbers (up to 16777215).\nvar morton = module.exports = function morton(x, y) {\n    return (Y[y         & 0xFF] | X[x         & 0xFF]) +\n           (Y[(y >> 8)  & 0xFF] | X[(x >> 8)  & 0xFF]) * 0x10000 +\n           (Y[(y >> 16) & 0xFF] | X[(x >> 16) & 0xFF]) * 0x100000000;\n};\n\nvar code = module.exports.code = function code(z, x, y) {\n    if (z > 24) throw 'Morton codes are only supported up to Z=24';\n    var Z = 1 << (24 - z);\n    return morton(x * Z, y * Z);\n};\n\nvar range = module.exports.range = function range(z, x, y) {\n    if (z > 24) throw 'Morton ranges are only supported up to Z=24';\n    var Z = 1 << (24 - z);\n    var lower = morton(x * Z, y * Z);\n    return [ lower, lower + Z * Z - 1 ];\n};\n\nvar rX, rY;\nvar reverse = module.exports.reverse = function reverse(c) {\n    if (c > 0xFFFFFFFFFFFF) throw 'Only morton codes up to 48 bits are supported.';\n    if (!rX) {\n        // Create reverse lookup tables.\n        rX = {}; rY = {};\n        for (var i = 0; i < 256; i++) {\n            rX[morton(i, 0)] = i;\n            rY[morton(0, i)] = i;\n        }\n    }\n\n    var x = rX[c & 0x5555];\n    var y = rY[c & 0xAAAA];\n    if (c > 0xFFFF) {\n        c /= 0x10000;\n        x |= rX[c & 0x5555] << 8;\n        y |= rY[c & 0xAAAA] << 8;\n        if (c > 0xFFFF) {\n            c /= 0x10000;\n            x |= rX[c & 0x5555] << 16;\n            y |= rY[c & 0xAAAA] << 16;\n        }\n    }\n\n    return [ x, y ];\n};\n\nvar decode = module.exports.decode = function decode(z, c) {\n    var output = reverse(c);\n    var Z = 1 << (24 - z);\n    return [ output[0] / Z, output[1] / Z ];\n};\n","// Fast Hilbert curve algorithm by http://threadlocalmutex.com/\n// Ported from C++ https://github.com/rawrunprotected/hilbert_curves (public domain)\nexport default function hilbert(x, y) {\n  let a = x ^ y;\n  let b = 0xFFFF ^ a;\n  let c = 0xFFFF ^ (x | y);\n  let d = x & (y ^ 0xFFFF);\n\n  let A = a | (b >> 1);\n  let B = (a >> 1) ^ a;\n  let C = ((c >> 1) ^ (b & (d >> 1))) ^ c;\n  let D = ((a & (c >> 1)) ^ (d >> 1)) ^ d;\n\n  a = A; b = B; c = C; d = D;\n  A = ((a & (a >> 2)) ^ (b & (b >> 2)));\n  B = ((a & (b >> 2)) ^ (b & ((a ^ b) >> 2)));\n  C ^= ((a & (c >> 2)) ^ (b & (d >> 2)));\n  D ^= ((b & (c >> 2)) ^ ((a ^ b) & (d >> 2)));\n\n  a = A; b = B; c = C; d = D;\n  A = ((a & (a >> 4)) ^ (b & (b >> 4)));\n  B = ((a & (b >> 4)) ^ (b & ((a ^ b) >> 4)));\n  C ^= ((a & (c >> 4)) ^ (b & (d >> 4)));\n  D ^= ((b & (c >> 4)) ^ ((a ^ b) & (d >> 4)));\n\n  a = A; b = B; c = C; d = D;\n  C ^= ((a & (c >> 8)) ^ (b & (d >> 8)));\n  D ^= ((b & (c >> 8)) ^ ((a ^ b) & (d >> 8)));\n\n  a = C ^ (C >> 1);\n  b = D ^ (D >> 1);\n\n  let i0 = x ^ y;\n  let i1 = b | (0xFFFF ^ (i0 | a));\n\n  i0 = (i0 | (i0 << 8)) & 0x00FF00FF;\n  i0 = (i0 | (i0 << 4)) & 0x0F0F0F0F;\n  i0 = (i0 | (i0 << 2)) & 0x33333333;\n  i0 = (i0 | (i0 << 1)) & 0x55555555;\n\n  i1 = (i1 | (i1 << 8)) & 0x00FF00FF;\n  i1 = (i1 | (i1 << 4)) & 0x0F0F0F0F;\n  i1 = (i1 | (i1 << 2)) & 0x33333333;\n  i1 = (i1 | (i1 << 1)) & 0x55555555;\n\n  return ((i1 << 1) | i0) >>> 0;\n}\n","function partition(array, codes, left, right) {\n  var cmp = codes[right - 1],\n      minEnd = left,\n      maxEnd;\n  for (maxEnd = left; maxEnd < right - 1; maxEnd++) {\n    if (codes[maxEnd] <= cmp) {\n      swap(array, codes, maxEnd, minEnd);\n      minEnd++;\n    }\n  }\n  swap(array, codes, minEnd, right - 1);\n  return minEnd;\n}\n\nfunction swap(array, codes, i, j) {\n  const temp = array[i];\n  array[i]   = array[j];\n  array[j]   = temp;\n\n  const code = codes[i];\n  codes[i]   = codes[j];\n  codes[j]   = code;\n}\n\nfunction quickSort(array, codes, left, right) {\n  if (left < right) {\n    const p = partition(array, codes, left, right);\n    quickSort(array, codes, left, p);\n    quickSort(array, codes, p + 1, right);\n  }\n  return array;\n}\n\n\nfunction qsort(data, values, left, right) {\n  if (left >= right) return;\n\n  const pivot = values[(left + right) >> 1];\n  let i = left - 1;\n  let j = right + 1;\n\n  while (true) {\n      do i++; while (values[i] < pivot);\n      do j--; while (values[j] > pivot);\n      if (i >= j) break;\n      swap(data, values, i, j);\n  }\n\n  qsort(data, values, left, j);\n  qsort(data, values, j + 1, right);\n}\n\nexport default function sort (coords, codes) {\n  return qsort(coords, codes, 0, coords.length - 1);\n}\n","import sort from './sort';\nimport hilbert from './hilbert';\nimport morton from 'morton';\n\n\n/**\n * This is a very interesting decomposition:\n * It splits by equal spans on the space-filling curve.\n * It's super-fast, but the zones are of irregular shapes (tetris-like).\n * It gets worse if you use morton curve.\n */\nexport default class SFCTree {\n  constructor (points, x = p => p.x, y = p => p.y) {\n    this._x = x;\n    this._y = y;\n    this.buildHilbert(points);\n    //this.build(points);\n  }\n\n  buildHilbert(points) {\n    const n       = points.length;\n    const hvalues = new Array(n);\n    const order   = new Array(n);\n    const x = this._x, y = this._y;\n\n    for (let i = 0; i < n; i++) {\n      const p = points[i];\n      hvalues[i] = hilbert(x(p), y(p));\n      order[i]  = i;\n    }\n    sort(order, hvalues);\n    this._list = toList(points, order, hvalues, x, y);\n    this._root = sortedListToBST({ head: this._list }, 0, n);\n\n    let node = this._list;\n    // while (node) {\n    //   node.xmin = node.ymin = Infinity;\n    //   node.xmax = node.ymax = -Infinity;\n    //   node = node.next;\n    // }\n\n    node = this._list;\n    // while (node) {\n    //   const parent = node.parent;\n    //   const xn = x(node.point), yn = y(node.point);\n    //   if (parent) {\n    //     if (xn < parent.xmin) parent.xmin = xn;\n    //     if (yn < parent.ymin) parent.ymin = yn;\n    //     if (xn > parent.xmax) parent.xmax = xn;\n    //     if (yn > parent.ymax) parent.ymax = yn;\n    //   }\n    //   node = node.next;\n    // }\n  }\n\n  // build (points) {\n  //   const n = points.length;\n  //   const x = this._x, y = this._y;\n  //   const indexes = new Array(n);\n  //   const X = new Array(n), Y = new Array(n);\n  //   for (let i = 0; i < n; i++) {\n  //     const p = points[i];\n  //     X[i] = x(p); Y[i] = y(p); indexes[i] = i;\n  //   }\n  //   const byX = sort(indexes.slice(), X);\n  //   const byY = sort(indexes.slice(), Y);\n\n\n  // }\n\n  // _build (points, order, start, end) {\n  //   if (start === end) { // leaf\n  //     return { point: points[start], parent: null, left: null, right: null };\n  //   } else {\n  //     const med = Math.floor((start + end) / 2);\n  //     const root = { points[med]\n  //   }\n\n  // }\n\n\n  query (xmin, ymin, xmax, ymax) {\n    const qmin = morton(xmin, ymin), qmax = morton(xmax, ymax);\n    const result = [];\n\n    this.range(qmin, qmax, (node) => {\n      const x = this._x(node.point), y = this._y(node.point);\n      if (x <= xmax && x >= xmin && y <= ymax && y >= ymin) {\n        result.push(node.point);\n      }\n    });\n\n    return result;\n\n\n    // const Q = [this._root];\n    // const result = [];\n    // while (Q.length !== 0) {\n    //   const node = Q.pop();\n    //   if (node) {\n    //     const x = this._x(node.point), y = this._y(node.point);\n    //     if (x <= xmax && x >= xmin && y <= ymax && y >= ymin) {\n    //       result.push(node.point);\n    //     }\n    //     const { left, right } = node;\n    //     if (left  && left.code  >= qmin) Q.push(left);\n    //     if (right && right.code <= qmax) Q.push(right);\n    //     console.log(node.code, node.left, node.right, qmin, qmax);\n    //   }\n    // }\n    // return result;\n  }\n\n\n  range (low, high, fn, ctx) {\n    const Q = [];\n    let node = this._root;\n\n    while (Q.length !== 0 || node) {\n      if (node) {\n        Q.push(node);\n        node = node.left;\n      } else {\n        node = Q.pop();\n        if (node.code > high) {\n          break;\n        } else if (node.code >= low) {\n          if (fn.call(ctx, node)) return this; // stop if smth is returned\n        }\n        node = node.right;\n      }\n    }\n    return this;\n  }\n}\n\n\nfunction toList (nodes, order, codes, x, y) {\n  const list = { next: null };\n  let prev = list;\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[order[i]];\n    //const cx = x(node), cy = y(node);\n\n    prev = prev.next = node;\n  }\n  prev.next = null;\n  return list.next;\n}\n\n\nfunction sortedListToBST (list, start, end) {\n  const size = end - start;\n  if (size > 0) {\n    const middle = start + (size >> 1);\n    const left = sortedListToBST(list, start, middle);\n\n    const root = list.head;\n    root.left = left;\n    if (root.left) root.left.parent = root;\n\n    list.head = list.head.next;\n\n    root.right = sortedListToBST(list, middle + 1, end);\n    if (root.right) root.right.parent = root;\n    return root;\n  }\n\n  return null;\n}\n\n\nfunction sortedListToBST (list, first, last) {\n  const size = last - first;\n  if (size === 0) return list.head;\n  const split = first + (size >> 1);\n  const left  = sortedListToBST(list, first, split);\n  list.head = list.head.next;\n  const right = sortedListToBST(list, split + 1, last);\n  // const node = [left, right];\n  // node.code = split;\n  // return node;\n  return { left, right };\n}\n","import morton from 'morton';\nimport hilbert from './hilbert';\nimport sort from './sort';\nimport SFCTree from './sfc-tree';\n\nclass InternalNode {\n  constructor(code, left, right) {\n  //constructor(left, right) {\n    this.code  = code;\n    this.left  = left;\n    this.right = right;\n    left.parent = right.parent = this;\n  }\n}\n\nclass Leaf {\n  constructor (code, data) {\n    this.code = code;\n    this.data = data;\n  }\n}\n\nclass BucketLeaf {\n  constructor (code, data) {\n    this.code = code;\n    this.data = data;\n  }\n}\n\n\nfunction buildBuckets (data, ids, codes, first, last, bucketSize) {\n  if (last - first <= bucketSize) {\n    return new BucketLeaf(codes[first], ids.slice(first, last).map(i => data[i]));\n  }\n  const split = findSplit(codes, first, last);\n  const left  = build(data, ids, codes, first, split, bucketSize);\n  const right = build(data, ids, codes, split + 1, last, bucketSize);\n  const node = [left, right];\n  node.code = split;\n  return node;\n  //return new InternalNode(split, left, right);\n}\n\n\nfunction build (data, ids, codes, first, last) {\n  if (last - first === 0) return new Leaf(codes[first], data[ids[first]]);\n  const split = findSplit(codes, first, last);\n  const left  = build(data, ids, codes, first, split);\n  const right = build(data, ids, codes, split + 1, last);\n  // const node = [left, right];\n  // node.code = split;\n  // return node;\n  return new InternalNode(split, left, right);\n}\n\n\nfunction __clz(m) {\n  let c = 1 << 31;\n  for (let i = 0; i < 32; i += 1) {\n    if (c & m) return i;\n    c >>>= 1;\n  }\n  return 32;\n}\n\n\n// https://devblogs.nvidia.com/thinking-parallel-part-iii-tree-construction-gpu/\nfunction findSplit (codes, first, last) {\n  const f = codes[first];\n  const l = codes[last];\n\n  if (f === l) return (first + last) >> 1;\n\n  // Calculate the number of highest bits that are the same\n  // for all objects, using the count-leading-zeros intrinsic.\n  const commonPrefix = __clz(f ^ l);\n\n  // Use binary search to find where the next bit differs.\n  // Specifically, we are looking for the highest object that\n  // shares more than commonPrefix bits with the first one.\n\n  let split = first; // initial guess\n  let step = last - first, newSplit, splitCode, splitPrefix;\n\n  do {\n    step = (step + 1) >> 1; // exponential decrease\n    newSplit = split + step; // proposed new position\n\n    if (newSplit < last) {\n      splitCode = codes[newSplit];\n      splitPrefix = __clz(f ^ splitCode);\n      if (splitPrefix > commonPrefix) split = newSplit; // accept proposal\n    }\n  } while (step > 1)\n  return split;\n}\n\n\nconst defaultX = p => p.x;\nconst defaultY = p => p.y;\n\n\nexport default class PHTree {\n\n  constructor(points, getX = defaultX, getY = defaultY, bucketSize = 0, sfc = 'hilbert') {\n    const n     = points.length;\n    const codes = new Uint32Array(n);\n    let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;\n    let p, i, x, y;\n\n    this._x = getX;\n    this._y = getY;\n\n    const project = sfc === 'hilbert' ? hilbert : morton;\n    this._project = project;\n\n    const ids = new Uint32Array(n);\n\n    //const xz = new Float32Array(n), yz = new Float32Array(n);\n    for (i = 0; i < n; i++) {\n      p = points[i];\n      x = getX(p);\n      y = getY(p);\n      if (x < minX) minX = x;\n      if (y < minY) minY = y;\n      if (x > maxX) maxX = x;\n      if (y > maxY) maxY = y;\n      ids[i] = i;\n    }\n\n    this._minX = minX;\n    this._minY = minY;\n    this._maxX = maxX;\n    this._maxY = maxY;\n\n    const max = (1 << 16) - 1;\n    const w = max / (maxX - minX);\n    const h = max / (maxY - minY);\n    this._hw = w;\n    this._hh = h;\n\n    for (i = 0; i < n; i++) {\n      p = points[i];\n      //codes[i] = project(getX(p) - minX, getY(p) - minY);\n      codes[i] = project(w * (getX(p) - minX), h * (getY(p) - minY));\n    }\n    sort(ids, codes);\n    //for (let i = 0; i < n; i++) codes[i] = copy[ids[i]];\n\n    if (bucketSize === 0) {\n      this._root = build(points, ids, codes, 0, n - 1);\n    } else {\n      this._root = buildBuckets(points, ids, codes, n - 1, bucketSize);\n    }\n  }\n\n\n  visit (fn, ctx) {\n    const Q = [this._root];\n    while (Q.length !== 0) {\n      const node = Q.pop();\n      if (node) {\n        if (fn.call(ctx, node)) break;\n        if (!node.data) {\n          Q.push(node.left);\n          Q.push(node.right);\n        }\n      }\n    }\n    return this;\n  }\n\n\n  visitAfter (fn, ctx) {\n    let current = this._root;\n    const Q = [];  /* Initialize stack s */\n    let done = false;\n\n    while (!done) {\n      if (current) {\n        Q.push(current);\n        current = current.left;\n      } else {\n        if (Q.length !== 0) {\n          current = Q.pop();\n          fn.call(ctx, current);\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return this;\n  }\n\n\n  query (x0, y0, x1, y1) {\n    const result = [], Q = [];\n    this.visit((node) => {\n\n    });\n    return result;\n  }\n\n  map (fn, ctx) {\n    const res = [];\n    this.visitAfter(node => {\n      res.push(fn.call(ctx, node));\n    });\n    return res;\n  }\n\n\n  height () {\n    return height(this._root);\n  }\n\n\n  toString (printNode = (n) => n.code) {\n    const out = [];\n    row(this._root, '', true, (v) => out.push(v), printNode);\n    return out.join('');\n  }\n}\n\n\nfunction height (node) {\n  return node ? (1 + Math.max(height(node.left), height(node.right))) : 0;\n}\n\n\n/**\n * Prints level of the tree\n * @param  {Node}                        root\n * @param  {String}                      prefix\n * @param  {Boolean}                     isTail\n * @param  {Function(in:string):void}    out\n * @param  {Function(node:Node):String}  printNode\n */\nfunction row (root, prefix, isTail, out, printNode) {\n  if (root) {\n    out(`${ prefix }${ isTail ? '└── ' : '├── ' }${ printNode(root) }\\n`);\n    const indent = prefix + (isTail ? '    ' : '│   ');\n    if (root.left)  row(root.left,  indent, false, out, printNode);\n    if (root.right) row(root.right, indent, true,  out, printNode);\n  }\n}\n\nPHTree.SFCTree = SFCTree;\n"],"names":["let","const","morton","this"],"mappings":"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"}